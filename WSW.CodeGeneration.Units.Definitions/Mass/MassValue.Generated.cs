//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WSW.CodeGeneration.Units.Definitions
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using WSW.CodeGeneration.Units.Definitions;
    
    
    public abstract partial class MassValue : ValueWithUnit
    {
        
        public MassValue(double value) : 
                base(value)
        {
        }
        
        public static System.Collections.Generic.IEnumerable<string> UnitNames
        {
            get
            {
                yield return nameof(Grams);
                yield return nameof(Kilogram);
                yield return nameof(USTon);
                yield return nameof(Stone);
            }
        }
        
        public override ValueWithUnit TryConvert(string unit)
        {
            if ((unit == "Grams"))
            {
                return Grams.FromSI(SIValue);
            }
            if ((unit == "Kilogram"))
            {
                return Kilogram.FromSI(SIValue);
            }
            if ((unit == "USTon"))
            {
                return USTon.FromSI(SIValue);
            }
            if ((unit == "Stone"))
            {
                return Stone.FromSI(SIValue);
            }
            return null;
        }
        
        public static MassValue TryCreate(double value, string unit)
        {
            if ((unit == "Grams"))
            {
                return Grams.FromGrams(value);
            }
            if ((unit == "Kilogram"))
            {
                return Kilogram.FromKilogram(value);
            }
            if ((unit == "USTon"))
            {
                return USTon.FromUSTon(value);
            }
            if ((unit == "Stone"))
            {
                return Stone.FromStone(value);
            }
            return null;
        }
    }
}
